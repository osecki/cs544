////////////////////////////////////////////////////////////////////////
//
// ChannelClass.java
//
// This file was generated by XMLSpy 2008r2sp2 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.IRC;


public class ChannelClass extends com.altova.xml.TypeBase
{
		public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.IRC.IRC_TypeInfo.binder.getTypes()[com.IRC.IRC_TypeInfo._altova_ti_altova_ChannelClass]); }
	
	public ChannelClass(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{

		ChannelName= new MemberElement_ChannelName (this, com.IRC.IRC_TypeInfo.binder.getMembers()[com.IRC.IRC_TypeInfo._altova_mi_altova_ChannelClass._ChannelName]);
		ChannelTopic= new MemberElement_ChannelTopic (this, com.IRC.IRC_TypeInfo.binder.getMembers()[com.IRC.IRC_TypeInfo._altova_mi_altova_ChannelClass._ChannelTopic]);
		ChannelMode= new MemberElement_ChannelMode (this, com.IRC.IRC_TypeInfo.binder.getMembers()[com.IRC.IRC_TypeInfo._altova_mi_altova_ChannelClass._ChannelMode]);
	}
	// Attributes


	// Elements
	
	public MemberElement_ChannelName ChannelName;

		public static class MemberElement_ChannelName
		{
			public static class MemberElement_ChannelName_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_ChannelName member;
				public MemberElement_ChannelName_Iterator(MemberElement_ChannelName member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					ChannelNameType nx = new ChannelNameType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_ChannelName (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public ChannelNameType at(int index) {return new ChannelNameType(owner.getElementAt(info, index));}
			public ChannelNameType first() {return new ChannelNameType(owner.getElementFirst(info));}
			public ChannelNameType last(){return new ChannelNameType(owner.getElementLast(info));}
			public ChannelNameType append(){return new ChannelNameType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_ChannelName_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_ChannelTopic ChannelTopic;

		public static class MemberElement_ChannelTopic
		{
			public static class MemberElement_ChannelTopic_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_ChannelTopic member;
				public MemberElement_ChannelTopic_Iterator(MemberElement_ChannelTopic member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.IRC.xs.stringType nx = new com.IRC.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_ChannelTopic (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.IRC.xs.stringType at(int index) {return new com.IRC.xs.stringType(owner.getElementAt(info, index));}
			public com.IRC.xs.stringType first() {return new com.IRC.xs.stringType(owner.getElementFirst(info));}
			public com.IRC.xs.stringType last(){return new com.IRC.xs.stringType(owner.getElementLast(info));}
			public com.IRC.xs.stringType append(){return new com.IRC.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_ChannelTopic_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_ChannelMode ChannelMode;

		public static class MemberElement_ChannelMode
		{
			public static class MemberElement_ChannelMode_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_ChannelMode member;
				public MemberElement_ChannelMode_Iterator(MemberElement_ChannelMode member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					ChannelModeType nx = new ChannelModeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_ChannelMode (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public ChannelModeType at(int index) {return new ChannelModeType(owner.getElementAt(info, index));}
			public ChannelModeType first() {return new ChannelModeType(owner.getElementFirst(info));}
			public ChannelModeType last(){return new ChannelModeType(owner.getElementLast(info));}
			public ChannelModeType append(){return new ChannelModeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_ChannelMode_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}

		public void setXsiType() {com.altova.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "http://www.l-3com.com/cseast/Symphony", "ChannelClass");}
}
