////////////////////////////////////////////////////////////////////////
//
// ChannelClass.java
//
// This file was generated by XMLSpy 2009 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.IRC;


public class ChannelClass extends com.altova.xml.TypeBase
{
		public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.IRC.IRC_TypeInfo.binder.getTypes()[com.IRC.IRC_TypeInfo._altova_ti_altova_ChannelClass]); }
	
	public ChannelClass(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}
	
	private void instantiateMembers()
	{

		Name= new MemberElement_Name (this, com.IRC.IRC_TypeInfo.binder.getMembers()[com.IRC.IRC_TypeInfo._altova_mi_altova_ChannelClass._Name]);
		Desc= new MemberElement_Desc (this, com.IRC.IRC_TypeInfo.binder.getMembers()[com.IRC.IRC_TypeInfo._altova_mi_altova_ChannelClass._Desc]);
		Mode= new MemberElement_Mode (this, com.IRC.IRC_TypeInfo.binder.getMembers()[com.IRC.IRC_TypeInfo._altova_mi_altova_ChannelClass._Mode]);
	}
	// Attributes


	// Elements
	
	public MemberElement_Name Name;

		public static class MemberElement_Name
		{
			public static class MemberElement_Name_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Name member;
				public MemberElement_Name_Iterator(MemberElement_Name member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					NameType nx = new NameType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Name (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public NameType at(int index) {return new NameType(owner.getElementAt(info, index));}
			public NameType first() {return new NameType(owner.getElementFirst(info));}
			public NameType last(){return new NameType(owner.getElementLast(info));}
			public NameType append(){return new NameType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Name_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Desc Desc;

		public static class MemberElement_Desc
		{
			public static class MemberElement_Desc_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Desc member;
				public MemberElement_Desc_Iterator(MemberElement_Desc member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.IRC.xs.stringType nx = new com.IRC.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Desc (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.IRC.xs.stringType at(int index) {return new com.IRC.xs.stringType(owner.getElementAt(info, index));}
			public com.IRC.xs.stringType first() {return new com.IRC.xs.stringType(owner.getElementFirst(info));}
			public com.IRC.xs.stringType last(){return new com.IRC.xs.stringType(owner.getElementLast(info));}
			public com.IRC.xs.stringType append(){return new com.IRC.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Desc_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Mode Mode;

		public static class MemberElement_Mode
		{
			public static class MemberElement_Mode_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Mode member;
				public MemberElement_Mode_Iterator(MemberElement_Mode member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					ModeType nx = new ModeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Mode (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public ModeType at(int index) {return new ModeType(owner.getElementAt(info, index));}
			public ModeType first() {return new ModeType(owner.getElementFirst(info));}
			public ModeType last(){return new ModeType(owner.getElementLast(info));}
			public ModeType append(){return new ModeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Mode_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}

		public void setXsiType() {com.altova.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "http://www.drexel.edu", "ChannelClass");}
}
